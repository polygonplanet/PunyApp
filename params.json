{"name":"Punyapp","tagline":"The puny PHP framework for rapid compiling.","body":"PunyApp\r\n=======\r\n\r\n[![Build Status](https://travis-ci.org/polygonplanet/PunyApp.svg?branch=master)](https://travis-ci.org/polygonplanet/PunyApp)\r\n\r\nPunyApp is a lightweight MVC PHP framework that does not require the external PHP extensions, it's based the CakePHP framework.  \r\n  \r\nRequires PHP 5.2.0 or newer.  \r\n\r\n\r\n### Supported Databases\r\n\r\n* MySQL\r\n* PostgreSQL\r\n* SQLite\r\n* [Posql](http://feel.happy.nu/doc/posql/en/)\r\n\r\n\r\n### Tutorial\r\n\r\n#### layout\r\n\r\nApplication directory layout:  \r\n\r\n    /application\r\n      /controllers        -> App controllers\r\n      /models             -> App models\r\n      /views              -> App views\r\n      /libraries          -> App libraries\r\n      /storage            -> App storage\r\n      /settings           -> Application settings\r\n        app-settings.php\r\n        app-scheme.php\r\n      /public             -> public web\r\n        /css\r\n        /js\r\n        index.php\r\n    /punyapp              -> PunyApp libraries\r\n    /vendors              -> Vendors\r\n    index.php\r\n \r\n\r\n### Controllers\r\n\r\n```php\r\nclass SampleController extends PunyApp_Controller {\r\n\r\n  /**\r\n   * GET /login\r\n   */\r\n  public function getLogin() {\r\n    $this->view->render('sample/login');\r\n  }\r\n\r\n  /**\r\n   * POST /login\r\n   */\r\n  public function postLogin() {\r\n    $has = $this->models->sample->hasUser(\r\n      $this->request->params->id,\r\n      $this->request->params->pass\r\n    );\r\n\r\n    if ($has) {\r\n      $this->session->userid = $this->request->params->id;\r\n      $this->redirect('home');\r\n    }\r\n\r\n    // ...\r\n  }\r\n\r\n  /**\r\n   * Any /login\r\n   */\r\n  public function anyLogin() {\r\n    // ...\r\n  }\r\n\r\n  /**\r\n   * Before /login\r\n   */\r\n  public function beforeLogin() {\r\n    if (!empty($this->session->userid)) {\r\n      $this->redirect('home');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * After /login\r\n   */\r\n  public function afterLogin() {\r\n    // ...\r\n  }\r\n\r\n  /**\r\n   * GET /home\r\n   */\r\n  public function getHome() {\r\n    if (empty($this->session->userid)) {\r\n      $this->redirect('login');\r\n    }\r\n\r\n    $user = $this->models->sample->getUser(\r\n      $this->session->userid\r\n    );\r\n    $this->view->set('user', $user);\r\n    $this->view->render('sample/home');\r\n  }\r\n\r\n  /**\r\n   * GET /register\r\n   */\r\n  public function getRegister() {\r\n    $this->view->render('sample/register');\r\n  }\r\n\r\n  /**\r\n   * POST /register\r\n   */\r\n  public function postRegister() {\r\n    if ($this->validate()) {\r\n      $this->models->sample->addUser(\r\n        $this->request->params->id,\r\n        $this->request->params->email,\r\n        $this->request->params->pass\r\n      );\r\n      $this->session->userid = $this->request->params->id;\r\n      $this->redirect('home');\r\n    }\r\n\r\n    $this->view->render('sample/register');\r\n  }\r\n}\r\n```\r\n\r\n### Models\r\n\r\nUsing Prepared Statements.  \r\n\r\n\r\n```php\r\nclass SampleModel extends PunyApp_Model {\r\n\r\n  public function addUser($userid, $email, $pass) {\r\n    $sample = $this->newInstance();\r\n    $sample->userid = $userid;\r\n    $sample->email = $email;\r\n    $sample->pass = sha1($pass);\r\n    return $sample->save();\r\n  }\r\n\r\n\r\n  public function deleteUser($userid) {\r\n    return $this->delete(\r\n      array('userid' => '?'),\r\n      array($userid)\r\n    );\r\n  }\r\n\r\n\r\n  public function getUser($userid) {\r\n    return $this->findOne(\r\n      array(\r\n        'fields' => array('id', 'userid', 'email'),\r\n        'where' => array('userid' => '?')\r\n      ),\r\n      array($userid)\r\n    );\r\n  }\r\n\r\n\r\n  public function hasUser($userid, $pass) {\r\n    return $this->has(\r\n      array(\r\n        'where' => array(\r\n          'userid' => ':userid',\r\n          'pass' => ':pass'\r\n        )\r\n      ),\r\n      array(\r\n        ':userid' => $userid,\r\n        ':pass' => sha1($pass)\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\n\r\n```\r\n\r\n### Views\r\n\r\nUsing pure PHP template.  \r\n\r\nThe template variables is escaped for HTML entities by default.  \r\n\r\n\r\n```php\r\n$this->view->set('text', 'Hello!');\r\n$this->view->render('index');\r\n```\r\n\r\nviews/index.php  \r\n\r\n```php\r\n<html>\r\n  <body>\r\n    <h1>Sample</h1>\r\n    <?php echo $text; ?>\r\n  </body>\r\n</html>\r\n```\r\n\r\n### Events\r\n\r\nHandle application events, or define yourself.  \r\n\r\n```php\r\n// Handle the database error\r\n$this->event->on('app-database-error', function ($app, $error) {\r\n  if ($app->isDebug()) {\r\n    // Show error message only in debug mode\r\n    echo $app->escapeHTML($error);\r\n  }\r\n});\r\n```\r\n\r\n\r\n### Validation\r\n\r\nRequest Form Validation.  \r\n\r\n```php\r\npublic $validationRules = array(\r\n  'id' => array(\r\n    'required' => true,\r\n    'rule' => array('regex', '/^[a-z0-9]{1,10}$/i'),\r\n    'message' => 'Only letters and integers, max 10 characters'\r\n  ),\r\n  'email' => array(\r\n    'required' => true,\r\n    'rule' => array('email'),\r\n    'message' => 'Invalid email address'\r\n  ),\r\n  'pass' => array(\r\n    'required' => true,\r\n    'rule' => array(\r\n      array('minLength', 4),\r\n      array('maxLength', 20)\r\n    ),\r\n    'message' => 'Min 4 characters, max 20 characters'\r\n  )\r\n);\r\n\r\n```\r\n\r\n\r\n### Install and Run\r\n\r\n* Extract files to the any directory on the server.\r\n\r\n* Settings `application/settings/app-settings.php`.\r\n\r\n```php\r\n$settings = array(\r\n  /**\r\n   * System settings\r\n   */\r\n  'system' => array(\r\n    /**\r\n     * Timezone\r\n     *\r\n     * e.g., 'America/Chicago', 'Asia/Tokyo' etc.\r\n     */\r\n    'timezone' => '',\r\n  ),\r\n\r\n  /**\r\n   * Database settings\r\n   */\r\n  'database' => array(\r\n\r\n    /**\r\n     * Database engine\r\n     *\r\n     * Available engines: \"mysql\", \"pgsql\", \"sqlite\" and \"posql\".\r\n     */\r\n    'engine' => '',\r\n  ),\r\n\r\n  /**\r\n   * Session settings\r\n   */\r\n  'session' => array(\r\n\r\n    /**\r\n     * Session engine\r\n     *\r\n     * Available engines: \"php\", \"file\" and \"database\".\r\n     */\r\n    'engine' => '',\r\n  )\r\n);\r\n```\r\n\r\n*  Create database schema or write schema in  `application/settings/app-schema.php`.\r\n\r\n* Set to writable permission in the directories and files under `application/storage`.\r\n\r\n* Browse the first you files extracted directory.  \r\n\r\n### Sample\r\n\r\n* There is a sample login form in `/sample/`.\r\n\r\n----\r\n\r\n### License\r\n\r\nThe PunyApp is open-sourced software licensed under the [MIT license](http://opensource.org/licenses/MIT)\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}